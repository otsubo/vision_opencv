diff --git a/opencv_apps/CMakeLists.txt b/opencv_apps/CMakeLists.txt
index 90d0262..1e17f34 100644
--- a/opencv_apps/CMakeLists.txt
+++ b/opencv_apps/CMakeLists.txt
@@ -4,6 +4,9 @@ project(opencv_apps)
 find_package(catkin REQUIRED COMPONENTS cv_bridge dynamic_reconfigure message_generation image_transport nodelet roscpp)
 
 find_package(OpenCV REQUIRED)
+message(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>")
+message("${OpenCV_VERSION}")
+message("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<")
 if (OpenCV_VERSION VERSION_EQUAL "3")
   set(${PROJECT_NAME}_EXTRA_CFG)
   set(${PROJECT_NAME}_EXTRA_FILES)
@@ -76,8 +79,13 @@ catkin_package()
 
 include_directories( ${catkin_INCLUDE_DIRS} ${OpenCV_INCLUDE_DIRS})
 
+message(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>")
+message("${OpenCV_INCLUDE_DIRS}")
+message("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<")
+
 ## Declare a cpp library
 add_library(${PROJECT_NAME} SHARED
+  src/nodelet/dense_flow.cpp
   # https://github.com/Itseez/opencv/blob/2.4/samples/cpp/tutorial_code
   # ImgTrans
   src/nodelet/edge_detection_nodelet.cpp
diff --git a/opencv_apps/src/nodelet/dense_flow.cpp b/opencv_apps/src/nodelet/dense_flow.cpp
new file mode 100644
index 0000000..710f4f1
--- /dev/null
+++ b/opencv_apps/src/nodelet/dense_flow.cpp
@@ -0,0 +1,92 @@
+// -*- mode: c++ -*-
+/*********************************************************************
+ * Software License Agreement (BSD License)
+ *
+ *  Copyright (c) 2015, JSK Lab
+ *  All rights reserved.
+ *
+ *  Redistribution and use in source and binary forms, with or without
+ *  modification, are permitted provided that the following conditions
+ *  are met:
+ *
+ *   * Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ *   * Redistributions in binary form must reproduce the above
+ *     copyright notice, this list of conditions and the following
+ *     disclaimer in the documentation and/o2r other materials provided
+ *     with the distribution.
+ *   * Neither the name of the JSK Lab nor the names of its
+ *     contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+ *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ *  POSSIBILITY OF SUCH DAMAGE.
+ *********************************************************************/
+
+
+#include <opencv2/opencv.hpp>
+#include <opencv2/optflow.hpp>
+
+int main()
+{
+  using namespace cv;
+
+  // DeepFlow計算用のインスタンスを生成
+  cv::Ptr<cv::DenseOpticalFlow> deepflow = optflow::createOptFlow_DeepFlow();
+  // 動画読み込み
+  VideoCapture capture(0);
+
+  // 前のフレーム保存
+  // まだグレースケールしか対応してないようなので変換
+  Mat prev, tmp;
+  capture >> tmp;
+  cvtColor(tmp, prev, COLOR_RGB2GRAY);
+
+  while (cv::waitKey(1) == -1)
+    {
+      Mat curr;
+      capture >> tmp;
+      if (tmp.empty())
+        break;
+      cvtColor(tmp, curr, COLOR_RGB2GRAY);
+
+      // オプティカルフローの計算
+      Mat flow;
+      deepflow->calc(prev, curr, flow);
+
+      // 表示するようにX成分とY成分に分解
+      Mat flowXY[2];
+      split(flow, flowXY);
+
+      // 極座標に変換
+      Mat magnitude, angle;
+      cartToPolar(flowXY[0], flowXY[1], magnitude, angle, true);
+
+      //  色相（H）はオプティカルフローの角度
+      //  彩度（S）は0～1に正規化したオプティカルフローの大きさ
+      //  明度（V）は1
+      Mat hsvPlanes[3];
+      hsvPlanes[0] = angle;
+      hsvPlanes[1] = magnitude;
+      hsvPlanes[2] = Mat::ones(angle.size(), CV_32F);
+      //  HSVを合成して一枚の画像にする
+      Mat hsv;
+      merge(hsvPlanes, 3, hsv);
+
+      // 表示
+      cv::imshow("DeepFlow", hsv);
+
+      // 前のフレームを保存
+      prev = curr;
+    }
+}
